# completion for django
function __fish_complete_django -d "Completions for django" --argument-names cmd
	complete -x -c $cmd

	complete -c $cmd -n '__fish_use_subcommand' -a dbshell -d "Runs the command-line client for specified database, or the default database if none is provided."
	complete -c $cmd -n '__fish_use_subcommand' -a compilemessages -d "Compiles .po files to .mo files for use with builtin gettext support."
	complete -c $cmd -n '__fish_use_subcommand' -a dumpdata -d "Output the contents of the database as a fixture of the given format (using each model's default manager unless --all is specified)."
	complete -c $cmd -n '__fish_use_subcommand' -a sql -d "Prints the CREATE TABLE SQL statements for the given app name(s)."
	complete -c $cmd -n '__fish_use_subcommand' -a shell -d "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
	complete -c $cmd -n '__fish_use_subcommand' -a sqlcustom -d "Prints the custom table modifying SQL statements for the given app name(s)."
	complete -c $cmd -n '__fish_use_subcommand' -a createcachetable -d "Creates the table needed to use the SQL cache backend."
	complete -c $cmd -n '__fish_use_subcommand' -a flush -d "Returns the database to the state it was in immediately after syncdb was executed. This means that all data will be removed from the database, any post-synchronization handlers will be re-executed, and the initial_data fixture will be re-installed."
	complete -c $cmd -n '__fish_use_subcommand' -a syncdb -d "Create the database tables for all apps in INSTALLED_APPS whose tables haven't already been created."
	complete -c $cmd -n '__fish_use_subcommand' -a check -d "Checks your configuration's compatibility with this version of Django."
	complete -c $cmd -n '__fish_use_subcommand' -a sqlinitialdata -d "RENAMED: see 'sqlcustom'"
	complete -c $cmd -n '__fish_use_subcommand' -a runserver -d "Starts a lightweight Web server for development."
	complete -c $cmd -n '__fish_use_subcommand' -a cleanup -d "Can be run as a cronjob or directly to clean out expired sessions (only with the database backend at the moment)."
	complete -c $cmd -n '__fish_use_subcommand' -a runfcgi -d "Runs this project as a FastCGI application. Requires flup."
	complete -c $cmd -n '__fish_use_subcommand' -a test -d "Discover and run tests in the specified modules or the current directory."
	complete -c $cmd -n '__fish_use_subcommand' -a sqlclear -d "Prints the DROP TABLE SQL statements for the given app name(s)."
	complete -c $cmd -n '__fish_use_subcommand' -a sqldropindexes -d "Prints the DROP INDEX SQL statements for the given model module name(s)."
	complete -c $cmd -n '__fish_use_subcommand' -a sqlsequencereset -d "Prints the SQL statements for resetting sequences for the given app name(s)."
	complete -c $cmd -n '__fish_use_subcommand' -a testserver -d "Runs a development server with data from the given fixture(s)."
	complete -c $cmd -n '__fish_use_subcommand' -a makemessages -d "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for projects and applications) directory.You must run this command with one of either the --locale or --all options."
	complete -c $cmd -n '__fish_use_subcommand' -a startproject -d "Creates a Django project directory structure for the given project name in the current directory or optionally in the given directory."
	complete -c $cmd -n '__fish_use_subcommand' -a validate -d "Validates all installed models."
	complete -c $cmd -n '__fish_use_subcommand' -a sqlall -d "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."
	complete -c $cmd -n '__fish_use_subcommand' -a diffsettings -d "Displays differences between the current settings.py and Django's    default settings. Settings that don't appear in the defaults are    followed by \"###\"."
	complete -c $cmd -n '__fish_use_subcommand' -a inspectdb -d "Introspects the database tables in the given database and outputs a Django model module."
	complete -c $cmd -n '__fish_use_subcommand' -a startapp -d "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory."
	complete -c $cmd -n '__fish_use_subcommand' -a sqlflush -d "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."
	complete -c $cmd -n '__fish_use_subcommand' -a loaddata -d "Installs the named fixture(s) in the database."
	complete -c $cmd -n '__fish_use_subcommand' -a sqlindexes -d "Prints the CREATE INDEX SQL statements for the given model module name(s)."

	complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s e -l exclude -d "An appname or appname.ModelName to exclude (use multiple --exclude to exclude multiple apps/models)."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l keep-pot -d "Keep .pot file after making messages. Useful when debugging."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-wrap -d "Don't break long message lines into several lines."
	complete -c $cmd -n '__fish_seen_subcommand_from syncdb' -l database -d "Nominates a database to synchronize. Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from test' -l liveserver -d "Overrides the default address where the live server (used with LiveServerTestCase) is expected to run from. The default value is localhost:8081."
	complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l noreload -d "Tells Django to NOT use the auto-reloader."
	complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l database -d "Nominates a database onto which the cache table will be installed. Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from sqlclear' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from startproject startapp' -l template -d "The path or URL to load the template from."
	complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l database -d "Nominates a database to introspect.  Defaults to using the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s d -l domain -d "The domain of the message files (default: \"django\")."
	complete -c $cmd -n '__fish_seen_subcommand_from startproject startapp' -s e -l extension -d "The file extension(s) to render (default: \"py\"). Separate multiple extensions with commas, or use -e multiple times."
	complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s n -l natural -d "Use natural keys if they are available."
	complete -c $cmd -n '__fish_seen_subcommand_from syncdb' -l noinput -d "Tells Django to NOT prompt the user for input of any kind."
	complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l nothreading -d "Tells Django to NOT use threading."
	complete -c $cmd -n '__fish_seen_subcommand_from test' -l noinput -d "Tells Django to NOT prompt the user for input of any kind."
	complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s a -l all -d "Use Django's base manager to dump all models stored in the database, including those that would otherwise be filtered or modified by a custom manager."
	complete -c $cmd -n '__fish_seen_subcommand_from test' -l failfast -d "Tells Django to stop running the test suite after first failed test."
	complete -c $cmd -n '__fish_seen_subcommand_from sqlindexes' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from flush' -l noinput -d "Tells Django to NOT prompt the user for input of any kind."
	complete -c $cmd -n '__fish_seen_subcommand_from sql' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from flush' -l database -d "Nominates a database to flush. Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from testserver' -s 6 -l ipv6 -d "Tells Django to use a IPv6 address."
	complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l pks -d "Only dump objects with given primary keys. Accepts a comma seperated list of keys. This option will only work when you specify one model."
	complete -c $cmd -n '__fish_seen_subcommand_from sqldropindexes' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from sqlcustom' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s e -l extension -d "The file extension(s) to examine (default: \"html,txt\", or \"js\" if the domain is \"djangojs\"). Separate multiple extensions with commas, or use -e multiple times."
	complete -c $cmd -n '__fish_seen_subcommand_from flush' -l no-initial-data -d "Tells Django not to load any initial data after database synchronization."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-location -d "Don't write '#: filename:line' lines."
	complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -s l -l locale -d "locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s a -l all -d "Updates the message files for all existing locales."
	complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l all -d "Display all settings, regardless of their value. Default values are prefixed by \"###\"."
	complete -c $cmd -n '__fish_seen_subcommand_from startproject startapp' -s n -l name -d "The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times."
	complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l database -d "Nominates a database onto which to open a shell.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s s -l symlinks -d "Follows symlinks to directories when examining source code and templates for translation strings."
	complete -c $cmd -n '__fish_seen_subcommand_from sqlall' -l database -d "Nominates a database to print the SQL for.  Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -s i -l ignorenonexistent -d "Ignores entries in the serialized data for fields that do not currently exist on the model."
	complete -c $cmd -n '__fish_seen_subcommand_from shell' -l plain -d "Tells Django to use plain Python, not IPython or bpython."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-default-ignore -d "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'."
	complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l format -d "Specifies the output serialization format for fixtures."
	complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l noinput -d "Tells Django to NOT prompt the user for input of any kind."
	complete -c $cmd -n '__fish_seen_subcommand_from dbshell compilemessages dumpdata sql shell sqlcustom createcachetable flush syncdb check sqlinitialdata runserver cleanup runfcgi test sqlclear sqldropindexes sqlsequencereset testserver makemessages startproject validate sqlall diffsettings inspectdb startapp sqlflush loaddata sqlindexes' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
	complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l database -d "Nominates a specific database to load fixtures into. Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from shell' -l no-startup -d "When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script."
	complete -c $cmd -n '__fish_seen_subcommand_from dbshell compilemessages dumpdata sql shell sqlcustom createcachetable flush syncdb check sqlinitialdata runserver cleanup runfcgi test sqlclear sqldropindexes sqlsequencereset testserver makemessages startproject validate sqlall diffsettings inspectdb startapp sqlflush loaddata sqlindexes' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
	complete -c $cmd -n '__fish_seen_subcommand_from runserver' -s 6 -l ipv6 -d "Tells Django to use a IPv6 address."
	complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l indent -d "Specifies the indent level to use when pretty-printing output"
	complete -c $cmd -n '__fish_seen_subcommand_from dbshell compilemessages dumpdata sql shell sqlcustom createcachetable flush syncdb check sqlinitialdata runserver cleanup runfcgi test sqlclear sqldropindexes sqlsequencereset testserver makemessages startproject validate sqlall diffsettings inspectdb startapp sqlflush loaddata sqlindexes' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
	complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l database -d "Nominates a specific database to dump fixtures from. Defaults to the \"default\" database."
	complete -c $cmd -n '__fish_seen_subcommand_from dbshell compilemessages dumpdata sql shell sqlcustom createcachetable flush syncdb check sqlinitialdata runserver cleanup runfcgi test sqlclear sqldropindexes sqlsequencereset testserver makemessages startproject validate sqlall diffsettings inspectdb startapp sqlflush loaddata sqlindexes' -l traceback -d "Raise on exception"
	complete -c $cmd -n '__fish_seen_subcommand_from shell' -s i -l interface -d "Specify an interactive interpreter interface. Available options: \"ipython\" and \"bpython\"" -a "ipython bpython"
	complete -c $cmd -n '__fish_seen_subcommand_from test' -l testrunner -d "Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting."
	complete -c $cmd -n '__fish_seen_subcommand_from syncdb' -l no-initial-data -d "Tells Django not to load any initial data after database synchronization."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s i -l ignore -d "Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more."
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-obsolete -d "Remove obsolete message strings."
	complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l addrport -d "port number or ipaddr:port to run the server on"
	complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s l -l locale -d "Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times."
end